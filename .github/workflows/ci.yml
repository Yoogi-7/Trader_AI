name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

# Anuluje starsze buildy na tym samym branchu/PR
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install lint tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Ruff check
        run: |
          ruff check .

  test:
    name: Tests (pytest)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # dołóż pytest jeśli nie ma go w requirements.txt
          python - <<'PY'
          import pkgutil, sys
          need = [p for p in ("pytest",) if pkgutil.find_loader(p) is None]
          if need:
              import subprocess
              subprocess.check_call([sys.executable, "-m", "pip", "install", *need])
          PY

      - name: Sanity checks (non-blocking)
        run: |
          python -c "import app; print('Import OK')"
          python -m app.scripts.bootstrap_btcusdt || true

      - name: Run pytest
        run: |
          pytest -q
